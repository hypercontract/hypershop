{
	"variables": [],
	"info": {
		"name": "CFHA REST API",
		"_postman_id": "911754d8-e797-ffa9-491d-2394f5af0cb1",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Search Catalog for Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    type: 'array',\r",
							"    items: {\r",
							"        type: 'object',\r",
							"        properties: {\r",
							"            _id: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            name: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            description: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            price: {\r",
							"                type: 'number'\r",
							"            }\r",
							"        },\r",
							"        required: [\r",
							"            '_id',\r",
							"            'name',\r",
							"            'description',\r",
							"            'price'\r",
							"        ]\r",
							"    }\r",
							"};\r",
							"\r",
							"var products = JSON.parse(responseBody);\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['response body is a list of products'] = tv4.validate(products, schema);\r",
							"tests['response body contains at least 2 products'] = products.length >= 2;\r",
							"tests['Content-Type header is application/json'] = postman.getResponseHeader('Content-Type').indexOf('application/json') > -1;\r",
							"\r",
							"postman.setEnvironmentVariable(\"productId1\", products[0]._id);\r",
							"postman.setEnvironmentVariable(\"productId2\", products[1]._id);\r",
							""
						]
					}
				}
			],
			"request": {
				"url": {
					"raw": "http://localhost:3000/products?query=nostrum",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "query",
							"value": "nostrum",
							"equals": true,
							"description": ""
						}
					],
					"variable": []
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Add Product to Shopping Cart #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests['status code is 201 Created'] = responseCode.code === 201;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === '/shoppingCart'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/shoppingCart/items",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"product\": \"{{productId1}}\",\n\t\"quantity\": 1\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Add Product to Shopping Cart #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests['status code is 201 Created'] = responseCode.code === 201;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === '/shoppingCart'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/shoppingCart/items",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"product\": \"{{productId2}}\",\n\t\"quantity\": 1\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        items: {\r",
							"            type: 'array',\r",
							"            items: {\r",
							"                type: 'object',\r",
							"                properties: {\r",
							"                    '_id': {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    'name': {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    'price': {\r",
							"                        type: 'number'\r",
							"                    },\r",
							"                    'quantity': {\r",
							"                        type: 'number'\r",
							"                    },\r",
							"                    'product': {\r",
							"                        type: 'string'\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        totalPrice: {\r",
							"            type: 'number'\r",
							"        }\r",
							"    },\r",
							"    required: [\r",
							"        'items',\r",
							"        'totalPrice'\r",
							"    ]\r",
							"};\r",
							"\r",
							"var shoppingCart = JSON.parse(responseBody);\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);\r",
							"tests['response body contains exactly 2 shopping cart items'] = shoppingCart.items.length === 2;\r",
							"tests['Content-Type header is application/json'] = postman.getResponseHeader('Content-Type').indexOf('application/json') > -1;\r",
							"\r",
							"postman.setEnvironmentVariable(\"shoppingCartItemId1\", shoppingCart.items[0]._id);\r",
							"postman.setEnvironmentVariable(\"shoppingCartItemId2\", shoppingCart.items[1]._id);\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/shoppingCart/",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Update quantity of Shopping Cart Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests['status code is 204 No Content'] = responseCode.code === 204;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === '/shoppingCart'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/shoppingCart/items/{{shoppingCartItemId1}}",
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"quantity\": 2\n}"
				},
				"description": "\t"
			},
			"response": []
		},
		{
			"name": "Remove Item from Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests['status code is 204 No Content'] = responseCode.code === 204;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === '/shoppingCart'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/shoppingCart/items/{{shoppingCartItemId2}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n"
				},
				"description": "\t"
			},
			"response": []
		},
		{
			"name": "View updated Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        items: {\r",
							"            type: 'array',\r",
							"            items: {\r",
							"                type: 'object',\r",
							"                properties: {\r",
							"                    '_id': {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    'name': {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    'price': {\r",
							"                        type: 'number'\r",
							"                    },\r",
							"                    'quantity': {\r",
							"                        type: 'number'\r",
							"                    },\r",
							"                    'product': {\r",
							"                        type: 'string'\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        totalPrice: {\r",
							"            type: 'number'\r",
							"        }\r",
							"    },\r",
							"    required: [\r",
							"        'items',\r",
							"        'totalPrice'\r",
							"    ]\r",
							"};\r",
							"\r",
							"var shoppingCart = JSON.parse(responseBody);\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);\r",
							"tests['response body contains 1 shopping cart item'] = shoppingCart.items.length === 1;\r",
							"tests['shopping cart item has a quantity of 2'] = shoppingCart.items[0].quantity === 2;\r",
							"tests['Content-Type header is application/json'] = postman.getResponseHeader('Content-Type').indexOf('application/json') > -1;\r",
							"\r",
							"postman.setEnvironmentVariable(\"lineItems\", JSON.stringify(shoppingCart.items));\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/shoppingCart/",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Select Billing/Shipping Address, Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        paymentOptions: {\r",
							"            type: 'array',\r",
							"            items: {\r",
							"                type: 'object',\r",
							"                properties: {\r",
							"                    _id: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    accountOwner: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    iban: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    bic: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                },\r",
							"                required: [\r",
							"                    '_id',\r",
							"                    'accountOwner',\r",
							"                    'iban',\r",
							"                    'bic'\r",
							"                ]\r",
							"            }\r",
							"        },\r",
							"        addresses: {\r",
							"            type: 'array',\r",
							"            items: {\r",
							"                type: 'object',\r",
							"                properties: {\r",
							"                    _id: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    name: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    street: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    zipCode: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    city: {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    country: {\r",
							"                        type: 'string'\r",
							"                    }\r",
							"                },\r",
							"                required: [\r",
							"                    '_id',\r",
							"                    'name',\r",
							"                    'street',\r",
							"                    'zipCode',\r",
							"                    'city',\r",
							"                    'country'\r",
							"                ]\r",
							"            }\r",
							"        }\r",
							"    },\r",
							"    required: [\r",
							"        'paymentOptions',\r",
							"        'addresses'\r",
							"    ]\r",
							"};\r",
							"\r",
							"var userProfile = JSON.parse(responseBody);\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['response body is a user profile'] = tv4.validate(userProfile, schema);\r",
							"tests['response body contains at least 1 payment option'] = userProfile.paymentOptions.length >= 1;\r",
							"tests['response body contains at least 2 addresses'] = userProfile.addresses.length >= 2;\r",
							"tests['Content-Type header is application/json'] = postman.getResponseHeader('Content-Type').indexOf('application/json') > -1;\r",
							"\r",
							"postman.setEnvironmentVariable(\"payment\", JSON.stringify(userProfile.paymentOptions[0]));\r",
							"postman.setEnvironmentVariable(\"billingAddress\", JSON.stringify(userProfile.addresses[0]));\r",
							"postman.setEnvironmentVariable(\"shippingAddress\", JSON.stringify(userProfile.addresses[1]));\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/userProfile",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Place Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var orderId = postman.getResponseHeader('Location').replace('/orders/', '');",
							"",
							"tests['status code is 201 Created'] = responseCode.code === 201;",
							"tests['Location header redirects to /orders/{orderId}'] = postman.getResponseHeader('Location') === '/orders/' + orderId; ",
							"tests['response body is empty'] = responseBody === '';",
							"",
							"postman.setEnvironmentVariable(",
							"    'orderId', ",
							"    orderId",
							");",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/orders/",
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"items\": {{lineItems}},\n\t\"billingAddress\": {{billingAddress}},\n\t\"shippingAddress\": {{shippingAddress}},\n\t\"payment\": {{payment}}\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View Order status",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        _id: {\r",
							"            type: 'string'\r",
							"        },\r",
							"        date: {\r",
							"            type: 'string'\r",
							"        },\r",
							"        status: {\r",
							"            type: 'string',\r",
							"            enum: [\r",
							"                'Cancelled',\r",
							"                'Delivered',\r",
							"                'InTransit',\r",
							"                'PaymentDue',\r",
							"                'PickupAvailable',\r",
							"                'Problem',\r",
							"                'Processing',\r",
							"                'Returned'\r",
							"            ]\r",
							"        },\r",
							"        items: {\r",
							"            type: 'array',\r",
							"            items: {\r",
							"                type: 'object',\r",
							"                properties: {\r",
							"                    'name': {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    'price': {\r",
							"                        type: 'number'\r",
							"                    },\r",
							"                    'quantity': {\r",
							"                        type: 'number'\r",
							"                    },\r",
							"                    'product': {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        billingAddress: {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                _id: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                name: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                street: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                zipCode: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                city: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                country: {\r",
							"                    type: 'string'\r",
							"                }\r",
							"            },\r",
							"            required: [\r",
							"                '_id',\r",
							"                'name',\r",
							"                'street',\r",
							"                'zipCode',\r",
							"                'city',\r",
							"                'country'\r",
							"            ]\r",
							"        },\r",
							"        shippingAddress: {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                _id: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                name: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                street: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                zipCode: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                city: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                country: {\r",
							"                    type: 'string'\r",
							"                }\r",
							"            },\r",
							"            required: [\r",
							"                '_id',\r",
							"                'name',\r",
							"                'street',\r",
							"                'zipCode',\r",
							"                'city',\r",
							"                'country'\r",
							"            ]\r",
							"        },\r",
							"        payment: {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                _id: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                accountOwner: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                iban: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                bic: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"            },\r",
							"            required: [\r",
							"                '_id',\r",
							"                'accountOwner',\r",
							"                'iban',\r",
							"                'bic'\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    required: [\r",
							"        '_id',\r",
							"        'date',\r",
							"        'items',\r",
							"        'billingAddress',\r",
							"        'shippingAddress',\r",
							"        'payment'\r",
							"    ]\r",
							"};\r",
							"\r",
							"var order = JSON.parse(responseBody);\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['response body is a order'] = tv4.validate(order, schema);\r",
							"tests['response body contains 1 line item'] = order.items.length === 1;\r",
							"tests['order status is PaymentDue'] = order.status === 'PaymentDue';\r",
							"tests['Content-Type header is application/json'] = postman.getResponseHeader('Content-Type').indexOf('application/json') > -1;\r",
							"\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/orders/{{orderId}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"items\": {{lineItems}},\n\t\"billingAddress\": {{billingAddress}},\n\t\"shippingAddress\": {{shippingAddress}},\n\t\"payment\": {{payment}}\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Cancel Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var orderId = postman.getResponseHeader('Location').replace('/orders/', '');\r",
							"\r",
							"tests['status code is 204 No Content'] = responseCode.code === 204;\r",
							"tests['Location header redirects to /orders/{orderId}'] = postman.getResponseHeader('Location') === '/orders/' + orderId; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/orders/{{orderId}}",
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\": \"Cancelled\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View updated Order status",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        _id: {\r",
							"            type: 'string'\r",
							"        },\r",
							"        date: {\r",
							"            type: 'string'\r",
							"        },\r",
							"        status: {\r",
							"            type: 'string',\r",
							"            enum: [\r",
							"                'Cancelled',\r",
							"                'Delivered',\r",
							"                'InTransit',\r",
							"                'PaymentDue',\r",
							"                'PickupAvailable',\r",
							"                'Problem',\r",
							"                'Processing',\r",
							"                'Returned'\r",
							"            ]\r",
							"        },\r",
							"        items: {\r",
							"            type: 'array',\r",
							"            items: {\r",
							"                type: 'object',\r",
							"                properties: {\r",
							"                    'name': {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                    'price': {\r",
							"                        type: 'number'\r",
							"                    },\r",
							"                    'quantity': {\r",
							"                        type: 'number'\r",
							"                    },\r",
							"                    'product': {\r",
							"                        type: 'string'\r",
							"                    },\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        billingAddress: {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                _id: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                name: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                street: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                zipCode: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                city: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                country: {\r",
							"                    type: 'string'\r",
							"                }\r",
							"            },\r",
							"            required: [\r",
							"                '_id',\r",
							"                'name',\r",
							"                'street',\r",
							"                'zipCode',\r",
							"                'city',\r",
							"                'country'\r",
							"            ]\r",
							"        },\r",
							"        shippingAddress: {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                _id: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                name: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                street: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                zipCode: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                city: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                country: {\r",
							"                    type: 'string'\r",
							"                }\r",
							"            },\r",
							"            required: [\r",
							"                '_id',\r",
							"                'name',\r",
							"                'street',\r",
							"                'zipCode',\r",
							"                'city',\r",
							"                'country'\r",
							"            ]\r",
							"        },\r",
							"        payment: {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                _id: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                accountOwner: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                iban: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"                bic: {\r",
							"                    type: 'string'\r",
							"                },\r",
							"            },\r",
							"            required: [\r",
							"                '_id',\r",
							"                'accountOwner',\r",
							"                'iban',\r",
							"                'bic'\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    required: [\r",
							"        '_id',\r",
							"        'date',\r",
							"        'items',\r",
							"        'billingAddress',\r",
							"        'shippingAddress',\r",
							"        'payment'\r",
							"    ]\r",
							"};\r",
							"\r",
							"var order = JSON.parse(responseBody);\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['response body is a order'] = tv4.validate(order, schema);\r",
							"tests['order status is Cancelled'] = order.status === 'Cancelled';\r",
							"tests['Content-Type header is application/json'] = postman.getResponseHeader('Content-Type').indexOf('application/json') > -1;\r",
							"\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/orders/{{orderId}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"items\": {{lineItems}},\n\t\"billingAddress\": {{billingAddress}},\n\t\"shippingAddress\": {{shippingAddress}},\n\t\"payment\": {{payment}}\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {",
							"    type: 'array',",
							"    items: {",
							"        type: 'object',",
							"        properties: {",
							"            _id: {",
							"                type: 'string'",
							"            },",
							"            date: {",
							"                type: 'string'",
							"            },",
							"            status: {",
							"                type: 'string',",
							"                enum: [",
							"                    'Cancelled',",
							"                    'Delivered',",
							"                    'InTransit',",
							"                    'PaymentDue',",
							"                    'PickupAvailable',",
							"                    'Problem',",
							"                    'Processing',",
							"                    'Returned'",
							"                ]",
							"            },",
							"            items: {",
							"                type: 'array',",
							"                items: {",
							"                    type: 'object',",
							"                    properties: {",
							"                        'name': {",
							"                            type: 'string'",
							"                        },",
							"                        'price': {",
							"                            type: 'number'",
							"                        },",
							"                        'quantity': {",
							"                            type: 'number'",
							"                        },",
							"                        'product': {",
							"                            type: 'string'",
							"                        },",
							"                    }",
							"                }",
							"            },",
							"            billingAddress: {",
							"                type: 'object',",
							"                properties: {",
							"                    _id: {",
							"                        type: 'string'",
							"                    },",
							"                    name: {",
							"                        type: 'string'",
							"                    },",
							"                    street: {",
							"                        type: 'string'",
							"                    },",
							"                    zipCode: {",
							"                        type: 'string'",
							"                    },",
							"                    city: {",
							"                        type: 'string'",
							"                    },",
							"                    country: {",
							"                        type: 'string'",
							"                    }",
							"                },",
							"                required: [",
							"                    '_id',",
							"                    'name',",
							"                    'street',",
							"                    'zipCode',",
							"                    'city',",
							"                    'country'",
							"                ]",
							"            },",
							"            shippingAddress: {",
							"                type: 'object',",
							"                properties: {",
							"                    _id: {",
							"                        type: 'string'",
							"                    },",
							"                    name: {",
							"                        type: 'string'",
							"                    },",
							"                    street: {",
							"                        type: 'string'",
							"                    },",
							"                    zipCode: {",
							"                        type: 'string'",
							"                    },",
							"                    city: {",
							"                        type: 'string'",
							"                    },",
							"                    country: {",
							"                        type: 'string'",
							"                    }",
							"                },",
							"                required: [",
							"                    '_id',",
							"                    'name',",
							"                    'street',",
							"                    'zipCode',",
							"                    'city',",
							"                    'country'",
							"                ]",
							"            },",
							"            payment: {",
							"                type: 'object',",
							"                properties: {",
							"                    _id: {",
							"                        type: 'string'",
							"                    },",
							"                    accountOwner: {",
							"                        type: 'string'",
							"                    },",
							"                    iban: {",
							"                        type: 'string'",
							"                    },",
							"                    bic: {",
							"                        type: 'string'",
							"                    },",
							"                },",
							"                required: [",
							"                    '_id',",
							"                    'accountOwner',",
							"                    'iban',",
							"                    'bic'",
							"                ]",
							"            }",
							"        },",
							"        required: [",
							"            '_id',",
							"            'date',",
							"            'items',",
							"            'billingAddress',",
							"            'shippingAddress',",
							"            'payment'",
							"        ]",
							"    }",
							"};",
							"",
							"var orders = JSON.parse(responseBody);",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['response body is a list of orders'] = tv4.validate(orders, schema);",
							"tests['response body contains at least 1 order'] = orders.length >= 1;",
							"tests['Content-Type header is application/json'] = postman.getResponseHeader('Content-Type').indexOf('application/json') > -1;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/orders/",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		}
	]
}