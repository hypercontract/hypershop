{
	"variables": [],
	"info": {
		"name": "CFHA Hypermedia API",
		"_postman_id": "da81f593-af18-4245-18fd-c2afab3d39ef",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Check API Root",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var apiRoot = JSON.parse(responseBody);",
							"",
							"var selfLink = apiRoot._links.self.href;",
							"var searchCatalogLink = apiRoot._links[nsUri + 'search-catalog'].href;",
							"var shoppingCartLink = apiRoot._links[nsUri + 'shopping-cart'].href;",
							"var ordersLink = apiRoot._links[nsUri + 'orders'].href;",
							"var userProfileLink = apiRoot._links[nsUri + 'user-profile'].href;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"tests['response body contains the API version'] = apiRoot.version === '1.0';",
							"tests['response body contains self link'] = selfLink === baseUrl;",
							"tests['response body contains link to search catalog'] = searchCatalogLink === baseUrl + 'products/{?query}';",
							"tests['response body contains link to shopping cart'] = shoppingCartLink === baseUrl + 'shoppingCart/';",
							"tests['response body contains link to orders'] = ordersLink === baseUrl + 'orders/';",
							"tests['response body contains link to user profile'] = userProfileLink === baseUrl + 'userProfile/';",
							"",
							"postman.setEnvironmentVariable('apiRootLink', selfLink);",
							"postman.setEnvironmentVariable('searchCatalogLink', searchCatalogLink.replace('{?query}', '?query=nostrum'));",
							"postman.setEnvironmentVariable('shoppingCartLink', shoppingCartLink);",
							"postman.setEnvironmentVariable('ordersLink', ordersLink);",
							"postman.setEnvironmentVariable('userProfileLink', userProfileLink);",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariables();",
							"",
							"var nsUri = 'http://cfha.luchs.org/';",
							"var mediaType = 'application/hal+json;profile=\"' + nsUri + 'profile\"';",
							"",
							"var mediaTypeRegExp = _.escapeRegExp(mediaType).split(';').join('(.*)');",
							"",
							"postman.setEnvironmentVariable('defaultAccept', mediaType);",
							"postman.setEnvironmentVariable('defaultContentType', mediaType);",
							"postman.setEnvironmentVariable('defaultContentTypeRegExp', mediaTypeRegExp);",
							"postman.setEnvironmentVariable('baseUrl', 'http://localhost:3000/');",
							"postman.setEnvironmentVariable('nsUri', nsUri);",
							"",
							"var linksSchema = {",
							"    type: 'object',",
							"    properties: {",
							"        self: {",
							"            type: 'object',",
							"            properties: {",
							"                href: {",
							"                    type: 'string'",
							"                }",
							"            }",
							"        }",
							"    },",
							"    required: [",
							"        'self'",
							"    ]",
							"};",
							"",
							"postman.setEnvironmentVariable('productsSchema', JSON.stringify({",
							"    type: 'object',",
							"    properties: {",
							"        _embedded: {",
							"            type: 'object',",
							"            properties: {",
							"                [nsUri + 'products']: {",
							"                    type: 'array',",
							"                    items: {",
							"                        type: 'object',",
							"                        properties: {",
							"                            name: {",
							"                                type: 'string'",
							"                            },",
							"                            description: {",
							"                                type: 'string'",
							"                            },",
							"                            price: {",
							"                                type: 'number'",
							"                            },",
							"                            _links: linksSchema",
							"                        },",
							"                        additionalProperties: false,",
							"                        required: [",
							"                            'name',",
							"                            'description',",
							"                            'price',",
							"                            '_links'",
							"                        ]",
							"                    }",
							"                }",
							"            },",
							"            additionalProperties: false,",
							"            required: [",
							"                nsUri + 'products'",
							"            ]",
							"        },",
							"        _links: linksSchema",
							"    },",
							"    additionalProperties: false,",
							"    required: [",
							"        '_embedded',",
							"        '_links'",
							"    ]",
							"}));",
							"",
							"postman.setEnvironmentVariable('shoppingCartSchema', JSON.stringify({",
							"    type: 'object',",
							"    properties: {",
							"        totalPrice: {",
							"            type: 'number'",
							"        },",
							"        _embedded: {",
							"            type: 'object',",
							"            properties: {",
							"                [nsUri + 'shopping-cart-items']: {",
							"                    type: 'array',",
							"                    items: {",
							"                        type: 'object',",
							"                        properties: {",
							"                            name: {",
							"                                type: 'string'",
							"                            },",
							"                            description: {",
							"                                type: 'string'",
							"                            },",
							"                            price: {",
							"                                type: 'number'",
							"                            },",
							"                            quantity: {",
							"                                type: 'number'",
							"                            },",
							"                            product: {",
							"                                type: 'string'",
							"                            },",
							"                            _links: linksSchema",
							"                        },",
							"                        additionalProperties: false,",
							"                        required: [",
							"                            'name',",
							"                            'description',",
							"                            'price',",
							"                            'quantity',",
							"                            'product',",
							"                            '_links'",
							"                        ]",
							"                    }",
							"                }",
							"            },",
							"            additionalProperties: false,",
							"            required: [",
							"                nsUri + 'shopping-cart-items'",
							"            ]",
							"        },",
							"        _links: linksSchema",
							"    },",
							"    additionalProperties: false,",
							"    required: [",
							"        'totalPrice',",
							"        '_embedded',",
							"        '_links'",
							"    ]",
							"}));",
							"",
							"postman.setEnvironmentVariable('userProfileSchema', JSON.stringify({",
							"    type: 'object',",
							"    properties: {",
							"        _embedded: {",
							"            type: 'object',",
							"            properties: {",
							"                [nsUri + 'payment-options']: {",
							"                    type: 'array',",
							"                    items: {",
							"                        type: 'object',",
							"                        properties: {",
							"                            accountOwner: {",
							"                                type: 'string'",
							"                            },",
							"                            iban: {",
							"                                type: 'string'",
							"                            },",
							"                            bic: {",
							"                                type: 'string'",
							"                            },",
							"                            _links: linksSchema",
							"                        },",
							"                        additionalProperties: false,",
							"                        required: [",
							"                            'accountOwner',",
							"                            'iban',",
							"                            'bic',",
							"                            '_links'",
							"                        ]",
							"                    }",
							"                },",
							"                [nsUri + 'addresses']: {",
							"                    type: 'array',",
							"                    items: {",
							"                        type: 'object',",
							"                        properties: {",
							"                            name: {",
							"                                type: 'string'",
							"                            },",
							"                            street: {",
							"                                type: 'string'",
							"                            },",
							"                            zipCode: {",
							"                                type: 'string'",
							"                            },",
							"                            city: {",
							"                                type: 'string'",
							"                            },",
							"                            country: {",
							"                                type: 'string'",
							"                            },",
							"                            _links: linksSchema",
							"                        },",
							"                        additionalProperties: false,",
							"                        required: [",
							"                            'name',",
							"                            'street',",
							"                            'zipCode',",
							"                            'city',",
							"                            'country',",
							"                            '_links'",
							"                        ]",
							"                    }",
							"                },",
							"            },",
							"            additionalProperties: false,",
							"            required: [",
							"                nsUri + 'payment-options',",
							"                nsUri + 'addresses'",
							"            ]",
							"        },",
							"        _links: linksSchema",
							"    },",
							"    additionalProperties: false,",
							"    required: [",
							"        '_embedded',",
							"        '_links'",
							"    ]",
							"}));",
							"",
							"postman.setEnvironmentVariable('orderSchema', JSON.stringify({",
							"    type: 'object',",
							"    properties: {",
							"        date: {",
							"            type: 'string'",
							"        },",
							"        status: {",
							"            type: 'string',",
							"            enum: [",
							"                'Cancelled',",
							"                'Delivered',",
							"                'InTransit',",
							"                'PaymentDue',",
							"                'PickupAvailable',",
							"                'Problem',",
							"                'Processing',",
							"                'Returned'",
							"            ]",
							"        },",
							"        items: {",
							"            type: 'array',",
							"            items: {",
							"                type: 'object',",
							"                properties: {",
							"                    'name': {",
							"                        type: 'string'",
							"                    },",
							"                    'description': {",
							"                        type: 'string'",
							"                    },",
							"                    'price': {",
							"                        type: 'number'",
							"                    },",
							"                    'quantity': {",
							"                        type: 'number'",
							"                    },",
							"                    'product': {",
							"                        type: 'string'",
							"                    },",
							"                },",
							"                additionalProperties: false,",
							"                required: [",
							"                    'name',",
							"                    'description',",
							"                    'price',",
							"                    'quantity',",
							"                    'product'",
							"                ]",
							"            }",
							"        },",
							"        billingAddress: {",
							"            type: 'object',",
							"            properties: {",
							"                name: {",
							"                    type: 'string'",
							"                },",
							"                street: {",
							"                    type: 'string'",
							"                },",
							"                zipCode: {",
							"                    type: 'string'",
							"                },",
							"                city: {",
							"                    type: 'string'",
							"                },",
							"                country: {",
							"                    type: 'string'",
							"                }",
							"            },",
							"            additionalProperties: false,",
							"            required: [",
							"                'name',",
							"                'street',",
							"                'zipCode',",
							"                'city',",
							"                'country'",
							"            ]",
							"        },",
							"        shippingAddress: {",
							"            type: 'object',",
							"            properties: {",
							"                name: {",
							"                    type: 'string'",
							"                },",
							"                street: {",
							"                    type: 'string'",
							"                },",
							"                zipCode: {",
							"                    type: 'string'",
							"                },",
							"                city: {",
							"                    type: 'string'",
							"                },",
							"                country: {",
							"                    type: 'string'",
							"                }",
							"            },",
							"            additionalProperties: false,",
							"            required: [",
							"                'name',",
							"                'street',",
							"                'zipCode',",
							"                'city',",
							"                'country'",
							"            ]",
							"        },",
							"        payment: {",
							"            type: 'object',",
							"            properties: {",
							"                accountOwner: {",
							"                    type: 'string'",
							"                },",
							"                iban: {",
							"                    type: 'string'",
							"                },",
							"                bic: {",
							"                    type: 'string'",
							"                },",
							"            },",
							"            additionalProperties: false,",
							"            required: [",
							"                'accountOwner',",
							"                'iban',",
							"                'bic'",
							"            ]",
							"        },",
							"        _links: linksSchema",
							"    },",
							"    additionalProperties: false,",
							"    required: [",
							"        'date',",
							"        'items',",
							"        'billingAddress',",
							"        'shippingAddress',",
							"        'payment',",
							"        '_links'",
							"    ]",
							"}));",
							"",
							"postman.setEnvironmentVariable('ordersSchema', JSON.stringify({",
							"    type: 'object',",
							"    properties: {",
							"        _embedded: {",
							"            type: 'object',",
							"            properties: {",
							"                [nsUri + 'orders']: {",
							"                    type: 'array',",
							"                    items: JSON.parse(postman.getEnvironmentVariable('orderSchema')),",
							"                    ",
							"                }",
							"            },",
							"            additionalProperties: false,",
							"            required: [",
							"                nsUri + 'orders'",
							"            ]",
							"        },",
							"        _links: linksSchema",
							"    },",
							"    additionalProperties: false,",
							"    required: [",
							"        '_embedded',",
							"        '_links'",
							"    ]",
							"}));",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View empty Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('shoppingCartSchema'));\r",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');\r",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');\r",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"var nsUri = postman.getEnvironmentVariable('nsUri');\r",
							"var shoppingCart = JSON.parse(responseBody);\r",
							"\r",
							"var selfLink = shoppingCart._links.self.href;\r",
							"var shoppingCartItemList = shoppingCart._embedded[nsUri + 'shopping-cart-items'];\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);\r",
							"tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);\r",
							"tests['response body contains no shopping cart items'] = shoppingCartItemList.length === 0;\r",
							"tests['response body contains self link'] = selfLink === baseUrl + 'shoppingCart/';\r",
							"tests['response body contains no place order link'] = _.isUndefined(shoppingCart._links[nsUri + 'place-order']);\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{shoppingCartLink}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Search Catalog for Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('productsSchema'));\r",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');\r",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');\r",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"var nsUri = postman.getEnvironmentVariable('nsUri');\r",
							"var products = JSON.parse(responseBody);\r",
							"\r",
							"var selfLink = products._links.self.href;\r",
							"var productList = products._embedded[nsUri + 'products'];\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);\r",
							"tests['response body is a list of products'] = tv4.validate(products, schema);\r",
							"tests['response body contains at least 2 products'] = productList.length >= 2;\r",
							"tests['response body contains self link'] = selfLink === baseUrl + 'products/';\r",
							"\r",
							"var allProductsHaveSelfLink = true;\r",
							"var allProductsHaveSCLink = true;\r",
							"\r",
							"var addToShoppingCartLinks = [];\r",
							"\r",
							"productList.forEach(function (product) {\r",
							"    var productHasSelfLink = product._links.self.href.match(baseUrl + 'products/.*/');\r",
							"    \r",
							"    var addToShoppingCartLink = product._links[nsUri + 'add-to-shopping-cart'].href;\r",
							"    var productHasSCLink = addToShoppingCartLink === baseUrl + 'shoppingCart/items/';\r",
							"    \r",
							"    addToShoppingCartLinks.push(addToShoppingCartLink);\r",
							"    \r",
							"    allProductsHaveSelfLink = allProductsHaveSelfLink && productHasSelfLink;\r",
							"    allProductsHaveSCLink = allProductsHaveSCLink && productHasSCLink;\r",
							"});\r",
							"\r",
							"tests['all products have self link'] = allProductsHaveSelfLink;\r",
							"tests['all products have add to shopping cart link'] = allProductsHaveSCLink;\r",
							"\r",
							"postman.setEnvironmentVariable(\"addToShoppingCartLink1\", addToShoppingCartLinks[0]);\r",
							"postman.setEnvironmentVariable(\"addToShoppingCartLink2\", addToShoppingCartLinks[1]);\r",
							"\r",
							"postman.setEnvironmentVariable(\"productUri1\", productList[0]._links.self.href);\r",
							"postman.setEnvironmentVariable(\"productUri2\", productList[1]._links.self.href);\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{searchCatalogLink}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Add Product to Shopping Cart #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"\r",
							"tests['status code is 201 Created'] = responseCode.code === 201;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === baseUrl + 'shoppingCart/'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							"\r",
							"postman.setEnvironmentVariable('shoppingCartLink', postman.getResponseHeader('Location'));\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{addToShoppingCartLink1}}",
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "{{defaultContentType}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"product\": \"{{productUri1}}\",\n\t\"quantity\": 1\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Add Product to Shopping Cart #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"\r",
							"tests['status code is 201 Created'] = responseCode.code === 201;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === baseUrl + 'shoppingCart/'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							"\r",
							"postman.setEnvironmentVariable('shoppingCartLink', postman.getResponseHeader('Location'));\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{addToShoppingCartLink2}}",
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "{{defaultContentType}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"product\": \"{{productUri2}}\",\n\t\"quantity\": 1\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('shoppingCartSchema'));\r",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');\r",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');\r",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"var nsUri = postman.getEnvironmentVariable('nsUri');\r",
							"var shoppingCart = JSON.parse(responseBody);\r",
							"\r",
							"var selfLink = shoppingCart._links.self.href;\r",
							"var shoppingCartItemList = shoppingCart._embedded[nsUri + 'shopping-cart-items'];\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);\r",
							"tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);\r",
							"tests['response body contains exactly 2 shopping cart items'] = shoppingCartItemList.length === 2;\r",
							"tests['response body contains self link'] = selfLink === baseUrl + 'shoppingCart/';\r",
							"tests['response body contains place order link'] = shoppingCart._links[nsUri + 'place-order'].href.match(baseUrl + 'orders/');\r",
							"\r",
							"var allItemsHaveSelfLink = true;\r",
							"var allItemsHaveUpdateLink = true;\r",
							"var allItemsHaveRemoveLink = true;\r",
							"\r",
							"var updateQuantityLinks = [];\r",
							"var removeLinks = [];\r",
							"\r",
							"shoppingCartItemList.forEach(function (item) {\r",
							"    var itemHasSelfLink = item._links.self.href.match(baseUrl + 'shoppingCart/items/.*/');\r",
							"    \r",
							"    var updateQuantityLink = item._links[nsUri + 'update-quantity'].href;\r",
							"    var itemHasUpdateLink = updateQuantityLink.match(baseUrl + 'shoppingCart/items/.*/');\r",
							"    updateQuantityLinks.push(updateQuantityLink);\r",
							"    \r",
							"    var removeLink = item._links[nsUri + 'remove'].href;\r",
							"    var itemHasRemoveLink = removeLink.match(baseUrl + 'shoppingCart/items/.*/');\r",
							"    removeLinks.push(removeLink);\r",
							"    \r",
							"    allItemsHaveSelfLink = allItemsHaveSelfLink && itemHasSelfLink;\r",
							"    allItemsHaveUpdateLink = allItemsHaveUpdateLink && itemHasUpdateLink;\r",
							"    allItemsHaveRemoveLink = allItemsHaveRemoveLink && itemHasRemoveLink;\r",
							"});\r",
							"\r",
							"tests['all items have self link'] = allItemsHaveSelfLink;\r",
							"tests['all items have update quantity link'] = allItemsHaveUpdateLink;\r",
							"tests['all items have remove link'] = allItemsHaveRemoveLink;\r",
							"\r",
							"postman.setEnvironmentVariable('shoppingCartItem1UpdateQuantityLink', updateQuantityLinks[0]);\r",
							"postman.setEnvironmentVariable('shoppingCartItem2RemoveLink', removeLinks[1]);\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{shoppingCartLink}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Update quantity of Shopping Cart Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"\r",
							"tests['status code is 204 No Content'] = responseCode.code === 204;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === baseUrl + 'shoppingCart/'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							"\r",
							"postman.setEnvironmentVariable('shoppingCartLink', postman.getResponseHeader('Location'));\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{shoppingCartItem1UpdateQuantityLink}}",
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "{{defaultContentType}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"quantity\": 2\n}"
				},
				"description": "\t"
			},
			"response": []
		},
		{
			"name": "Remove Item from Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"\r",
							"tests['status code is 204 No Content'] = responseCode.code === 204;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === baseUrl + 'shoppingCart/'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							"\r",
							"postman.setEnvironmentVariable('shoppingCartLink', postman.getResponseHeader('Location'));\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{shoppingCartItem2RemoveLink}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n"
				},
				"description": "\t"
			},
			"response": []
		},
		{
			"name": "View updated Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('shoppingCartSchema'));\r",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');\r",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');\r",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"var nsUri = postman.getEnvironmentVariable('nsUri');\r",
							"var shoppingCart = JSON.parse(responseBody);\r",
							"\r",
							"var selfLink = shoppingCart._links.self.href;\r",
							"var shoppingCartItemList = shoppingCart._embedded[nsUri + 'shopping-cart-items'];\r",
							"var placeOrderLink = shoppingCart._links[nsUri + 'place-order'].href;\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);\r",
							"tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);\r",
							"tests['response body contains 1 shopping cart item'] = shoppingCartItemList.length === 1;\r",
							"tests['shopping cart item has a quantity of 2'] = shoppingCartItemList[0].quantity === 2;\r",
							"tests['response body contains self link'] = selfLink === baseUrl + 'shoppingCart/';\r",
							"tests['response body contains place order link'] = placeOrderLink.match(baseUrl + 'orders/');\r",
							"\r",
							"var allItemsHaveSelfLink = true;\r",
							"var allItemsHaveUpdateLink = true;\r",
							"var allItemsHaveRemoveLink = true;\r",
							"\r",
							"shoppingCartItemList.forEach(function (item) {\r",
							"    var itemHasSelfLink = item._links.self.href.match(baseUrl + 'shoppingCart/items/.*/');\r",
							"    var itemHasUpdateLink = item._links[nsUri + 'update-quantity'].href.match(baseUrl + 'shoppingCart/items/.*/');\r",
							"    var itemHasRemoveLink = item._links[nsUri + 'remove'].href.match(baseUrl + 'shoppingCart/items/.*/');\r",
							"    \r",
							"    allItemsHaveSelfLink = allItemsHaveSelfLink && itemHasSelfLink;\r",
							"    allItemsHaveUpdateLink = allItemsHaveUpdateLink && itemHasUpdateLink;\r",
							"    allItemsHaveRemoveLink = allItemsHaveRemoveLink && itemHasRemoveLink;\r",
							"});\r",
							"\r",
							"tests['all items have self link'] = allItemsHaveSelfLink;\r",
							"tests['all items have update quantity link'] = allItemsHaveUpdateLink;\r",
							"tests['all items have remove link'] = allItemsHaveRemoveLink;\r",
							"\r",
							"postman.setEnvironmentVariable('placeOrderLink', placeOrderLink);\r",
							"\r",
							"postman.setEnvironmentVariable('lineItems', JSON.stringify(shoppingCartItemList.map(function (item) {\r",
							"    return _.omit(item, ['_links']);\r",
							"})));"
						]
					}
				}
			],
			"request": {
				"url": "{{shoppingCartLink}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Select Billing/Shipping Address, Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('userProfileSchema'));\r",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');\r",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');\r",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"var nsUri = postman.getEnvironmentVariable('nsUri');\r",
							"var userProfile = JSON.parse(responseBody);\r",
							"\r",
							"var selfLink = userProfile._links.self.href;\r",
							"var addressList = userProfile._embedded[nsUri + 'addresses'];\r",
							"var paymentOptionList = userProfile._embedded[nsUri + 'payment-options'];\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);\r",
							"tests['response body is a user profile'] = tv4.validate(userProfile, schema);\r",
							"tests['response body contains at least 2 addresses'] = addressList.length >= 2;\r",
							"tests['response body contains at least 1 payment option'] = paymentOptionList.length >= 1;\r",
							"tests['response body contains self link'] = selfLink === baseUrl + 'userProfile/';\r",
							"\r",
							"var allAddressesHaveSelfLink = true\r",
							"\r",
							"addressList.forEach(function (address) {\r",
							"    var addressHasSelfLink = address._links.self.href.match(baseUrl + 'userProfile/addresses/.*/');\r",
							"    \r",
							"    allAddressesHaveSelfLink = allAddressesHaveSelfLink && addressHasSelfLink;\r",
							"});\r",
							"\r",
							"tests['all addresses have self link'] = allAddressesHaveSelfLink;\r",
							"\r",
							"var allPaymentOptionsHaveSelfLink = true\r",
							"\r",
							"paymentOptionList.forEach(function (paymentOption) {\r",
							"    var paymentOptionHasSelfLink = paymentOption._links.self.href.match(baseUrl + 'userProfile/paymentOptions/.*/');\r",
							"    \r",
							"    allPaymentOptionsHaveSelfLink = allPaymentOptionsHaveSelfLink && paymentOptionHasSelfLink;\r",
							"});\r",
							"\r",
							"tests['all payment options have self link'] = allPaymentOptionsHaveSelfLink;\r",
							"\r",
							"postman.setEnvironmentVariable(\"payment\", JSON.stringify(_.omit(paymentOptionList[0], ['_links'])));\r",
							"postman.setEnvironmentVariable(\"billingAddress\", JSON.stringify(_.omit(addressList[0], ['_links'])));\r",
							"postman.setEnvironmentVariable(\"shippingAddress\", JSON.stringify(_.omit(addressList[1], ['_links'])));\r",
							"\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{userProfileLink}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Place Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"",
							"tests['status code is 201 Created'] = responseCode.code === 201;",
							"tests['Location header redirects to /orders/{orderId}'] = postman.getResponseHeader('Location').match(baseUrl + 'orders/.*/');",
							"tests['response body is empty'] = responseBody === '';",
							"",
							"postman.setEnvironmentVariable('orderLink', postman.getResponseHeader('Location'));",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{placeOrderLink}}",
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "{{defaultContentType}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"items\": {{lineItems}},\n\t\"billingAddress\": {{billingAddress}},\n\t\"shippingAddress\": {{shippingAddress}},\n\t\"payment\": {{payment}}\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View Order status",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('orderSchema'));\r",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');\r",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');\r",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"var nsUri = postman.getEnvironmentVariable('nsUri');\r",
							"var order = JSON.parse(responseBody);\r",
							"\r",
							"var selfLink = order._links.self.href;\r",
							"var cancelOrderLink = order._links[nsUri + 'cancel'].href;\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);\r",
							"tests['response body is a order'] = tv4.validate(order, schema);\r",
							"tests['response body contains 1 line item'] = order.items.length === 1;\r",
							"tests['order status is PaymentDue'] = order.status === 'PaymentDue';\r",
							"tests['response body contains self link'] = selfLink.match(baseUrl + 'orders/.*/');\r",
							"tests['response body contains cancel link'] = cancelOrderLink.match(baseUrl + 'orders/.*/');\r",
							"\r",
							"postman.setEnvironmentVariable('cancelOrderLink', cancelOrderLink);"
						]
					}
				}
			],
			"request": {
				"url": "{{orderLink}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"items\": {{lineItems}},\n\t\"billingAddress\": {{billingAddress}},\n\t\"shippingAddress\": {{shippingAddress}},\n\t\"payment\": {{payment}}\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Cancel Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"\r",
							"tests['status code is 204 No Content'] = responseCode.code === 204;\r",
							"tests['Location header redirects to /orders/{orderId}'] = postman.getResponseHeader('Location').match(baseUrl + 'orders/.*/');\r",
							"tests['response body is empty'] = responseBody === '';\r",
							"\r",
							"postman.setEnvironmentVariable('orderLink', postman.getResponseHeader('Location'));\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{cancelOrderLink}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View updated Order status",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('orderSchema'));\r",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');\r",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');\r",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"var nsUri = postman.getEnvironmentVariable('nsUri');\r",
							"var order = JSON.parse(responseBody);\r",
							"\r",
							"var selfLink = order._links.self.href;\r",
							"\r",
							"tests['status code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);\r",
							"tests['response body is a order'] = tv4.validate(order, schema);\r",
							"tests['order status is Cancelled'] = order.status === 'Cancelled';\r",
							"tests['response body contains self link'] = selfLink.match(baseUrl + 'orders/.*/');\r",
							"tests['response body contains no cancel link'] = _.isUndefined(order._links[nsUri + 'cancel']);\r",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{orderLink}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"items\": {{lineItems}},\n\t\"billingAddress\": {{billingAddress}},\n\t\"shippingAddress\": {{shippingAddress}},\n\t\"payment\": {{payment}}\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "View Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('ordersSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var orders = JSON.parse(responseBody);",
							"",
							"var selfLink = orders._links.self.href;",
							"var orderList = orders._embedded[nsUri + 'orders'];",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"tests['response body is a list of orders'] = tv4.validate(orders, schema);",
							"tests['response body contains at least 1 order'] = orderList.length >= 1;",
							"tests['response body contains self link'] = selfLink.match(baseUrl + 'orders/');",
							"",
							"var allOrdersHaveSelfLink = true;",
							"var allOpenOrdersHaveCancelLink = true;",
							"",
							"orderList.forEach(function (order) {",
							"    var orderHasSelfLink = order._links.self.href.match(baseUrl + 'orders/.*/');",
							"    allOrdersHaveSelfLink = allOrdersHaveSelfLink && orderHasSelfLink;",
							"    ",
							"    if (['PaymentDue', 'Processing'].includes(order.status)) {",
							"        var orderHasCancelLink = order._links[nsUri + 'cancel'].href.match(baseUrl + 'orders/.*/');",
							"        allOpenOrdersHaveCancelLink = allOpenOrdersHaveCancelLink && orderHasCancelLink;",
							"    }",
							"    ",
							"});",
							"",
							"tests['all orders have self link'] = allOrdersHaveSelfLink;",
							"tests['all open orders have cancel link'] = allOpenOrdersHaveCancelLink;",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{ordersLink}}",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		}
	]
}